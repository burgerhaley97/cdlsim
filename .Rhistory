col_idx <- which(as.integer(colnames(transition_matrix)) == background_value)
if (length(row_idx) > 0 && length(col_idx) > 0) {
# Insert a row of 1 at the position of background_value
new_row <- rep(0, ncol(transition_matrix) + 1)
new_row[1] <- 1
transition_matrix <- rbind(transition_matrix[1:(row_idx - 1), ], new_row, transition_matrix[row_idx:nrow(transition_matrix), ])
# Insert a column of 0s at the position of background_value
new_col <- rep(0, nrow(transition_matrix))
transition_matrix <- cbind(transition_matrix[, 1:(col_idx - 1)], new_col, transition_matrix[, col_idx:ncol(transition_matrix)])
# Set the row and column names
rownames(transition_matrix) <- c(rownames(transition_matrix)[1:(row_idx - 1)], background_value, rownames(transition_matrix)[row_idx:(nrow(transition_matrix) - 1)])
colnames(transition_matrix) <- c(colnames(transition_matrix)[1:(col_idx - 1)], background_value, colnames(transition_matrix)[col_idx:(ncol(transition_matrix) - 1)])
}
} else {
# If background_value is 0, retain current behavior
transition_matrix <- rbind(0, transition_matrix)
transition_matrix <- cbind(0, transition_matrix)
rownames(transition_matrix) <- c(0, rownames(transition_matrix)[-1])
colnames(transition_matrix) <- c(0, colnames(transition_matrix)[-1])
}
}
# Find the patches in the og layer
patched_raster <- find_patches(original_raster)
# Produce the associated list of class matrices
vecs <- generate_transition_vectors(r = patched_raster,
confusion_matrix = transition_matrix,
iterations = iterations)
# Collapse the patched raster and combined
tagged_raster <- collapse_and_combined(patched_raster, og_raster)
# Extract row and column names from the transition matrix
# Define vars for use in the app function
row_names <- as.integer(rownames(transition_matrix))
col_names <- as.integer(colnames(transition_matrix))
# generate transition vectors
vecs <- generate_transition_vectors(patch2, transition_matrix = conf_mat, iterations = 10)
# Initialize the simulation with the original raster
current_raster <- original_raster
# create the new simulated raster
current_raster <- terra::app(tagged_raster, fun = transition_patches_random,
trans_vecs = vecs)
return(current_raster)
}
patch_sim <- simulate_raster_patch(original_raster = r,
transition_matrix = conf_mat,
iterations = 5)
#' Function to simulate tagged patch values in a single layer spatraster.
#'
#' @param original_raster The SpatRaster object representing the categorical data.
#' @param transition_matrix Transition matrix values that define transitions based on class values.
#' @param background_value The value that represents no data areas.
#' @param iterations The number of simulations to be performed.
#' @returns A SpatRaster where the negative value patches are set to transition.
#' @import landscapemetrics
#' @export
simulate_raster_patch <- function(original_raster, transition_matrix,
iterations = 10, background_value = 0,
background_trans = FALSE) {
# Ensure objects are the correct class
transition_matrix <- as.matrix(transition_matrix)
iterations <- as.integer(iterations)
# Set up background transitions
if (!background_trans) {
if (background_value != 0) {
# Find the position of background_value in the matrix
row_idx <- which(as.integer(rownames(transition_matrix)) == background_value)
col_idx <- which(as.integer(colnames(transition_matrix)) == background_value)
if (length(row_idx) > 0 && length(col_idx) > 0) {
# Insert a row of 1 at the position of background_value
new_row <- rep(0, ncol(transition_matrix) + 1)
new_row[1] <- 1
transition_matrix <- rbind(transition_matrix[1:(row_idx - 1), ], new_row, transition_matrix[row_idx:nrow(transition_matrix), ])
# Insert a column of 0s at the position of background_value
new_col <- rep(0, nrow(transition_matrix))
transition_matrix <- cbind(transition_matrix[, 1:(col_idx - 1)], new_col, transition_matrix[, col_idx:ncol(transition_matrix)])
# Set the row and column names
rownames(transition_matrix) <- c(rownames(transition_matrix)[1:(row_idx - 1)], background_value, rownames(transition_matrix)[row_idx:(nrow(transition_matrix) - 1)])
colnames(transition_matrix) <- c(colnames(transition_matrix)[1:(col_idx - 1)], background_value, colnames(transition_matrix)[col_idx:(ncol(transition_matrix) - 1)])
}
} else {
# If background_value is 0, retain current behavior
transition_matrix <- rbind(0, transition_matrix)
transition_matrix <- cbind(0, transition_matrix)
rownames(transition_matrix) <- c(0, rownames(transition_matrix)[-1])
colnames(transition_matrix) <- c(0, colnames(transition_matrix)[-1])
}
}
# Find the patches in the og layer
patched_raster <- find_patches(original_raster)
# Produce the associated list of class matrices
vecs <- generate_transition_vectors(r = patched_raster,
confusion_matrix = transition_matrix,
iterations = iterations)
# Collapse the patched raster and combined
tagged_raster <- collapse_and_combined(patched_raster, og_raster)
# Extract row and column names from the transition matrix
# Define vars for use in the app function
row_names <- as.integer(rownames(transition_matrix))
col_names <- as.integer(colnames(transition_matrix))
# generate transition vectors
vecs <- generate_transition_vectors(patched_raster, confusion_matrix = conf_mat, iterations = 10)
# Initialize the simulation with the original raster
current_raster <- original_raster
# create the new simulated raster
current_raster <- terra::app(tagged_raster, fun = transition_patches_random,
trans_vecs = vecs)
return(current_raster)
}
patch_sim <- simulate_raster_patch(original_raster = r,
transition_matrix = conf_mat,
iterations = 5)
patch_sim <- simulate_raster_patch(original_raster = og_reclass,
transition_matrix = conf_mat,
iterations = 5)
#' Function to generate transition vectors for negative cell values
#'
#' @param r The SpatRaster object from get_patches.
#' @param confusion_matrix The transition matrix you want to use.
#' @returns A matrix of vector for each patch in each layer.
generate_transition_vectors <- function(r, confusion_matrix, iterations = 10) {
# Initialize a list to store the transition vectors for each unique patch ID
transition_matrices <- list()
# Extract unique non-NA values for each layer and store in a list
unique_values_list <- lapply(1:nlyr(r), function(i) {
as.vector(na.omit(unique(values(r[[i]]))))
})
# Set the names of the list elements to match the layer names
names(unique_values_list) <- names(r)
# Loop through each list element in unique_values_list
for (layer_name in names(unique_values_list)) {
neg_values <- unique_values_list[[layer_name]]
# Initialize an empty matrix to store the transition vectors for this layer
layer_matrix <- matrix(nrow = length(neg_values), ncol = iterations)
rownames(layer_matrix) <- neg_values
# Loop through each unique value in the current list element
for (i in seq_along(neg_values)) {
neg_val <- neg_values[i]
# Get the transition probabilities for the current layer name from confusion_matrix
# Assuming that the same row is used for each `neg_val` in the current layer
probabilities <- confusion_matrix[which(rownames(confusion_matrix) == layer_name), ]
#Get col names to sample from transition matrix
col_names <- as.numeric(colnames(confusion_matrix))
# Generate the transition vector by sampling with replacement
new_values <- sample(col_names, size = iterations, replace = TRUE, prob = probabilities)
# Store the transition vector in the corresponding row of the matrix
layer_matrix[i, ] <- new_values
}
# Store the matrix in the list, with the layer name as the key
transition_matrices[[layer_name]] <- layer_matrix
}
return(transition_matrices)
}
patch2
vecs <- generate_transition_vectors(patch2, conf_mat, 4)
conf_mat
# Set the first row and first column to 0
conf_mat[1, ] <- c(1, 0, 0, 0, 0)
conf_mat[, 1] <- 0
# Assign row and column names
rownames(conf_mat) <- c("0", "1", "2", "3", "4")
colnames(conf_mat) <- c("0", "1", "2", "3", "4")
conf_mat
conf_mat[, 1] <- c(1, 0, 0, 0, 0)
# Assign row and column names
rownames(conf_mat) <- c("0", "1", "2", "3", "4")
colnames(conf_mat) <- c("0", "1", "2", "3", "4")
conf_mat
patch_sim <- simulate_raster_patch(original_raster = og_reclass,
transition_matrix = conf_mat,
iterations = 5)
patch_sim <- simulate_raster_patch(original_raster = og_reclass,
transition_matrix = conf_mat,
iterations = 5)
vecs <- generate_transition_vectors(patch2, conf_mat, 4)
vecs <- generate_transition_vectors(patch2, conf_mat, 4)
vecs
#' Function to simulate tagged patch values in a single layer spatraster.
#'
#' @param original_raster The SpatRaster object representing the categorical data.
#' @param transition_matrix Transition matrix values that define transitions based on class values.
#' @param background_value The value that represents no data areas.
#' @param iterations The number of simulations to be performed.
#' @returns A SpatRaster where the negative value patches are set to transition.
#' @import landscapemetrics
#' @export
simulate_raster_patch <- function(original_raster, transition_matrix,
iterations = 10, background_value = 0,
background_trans = FALSE) {
# Ensure objects are the correct class
transition_matrix <- as.matrix(transition_matrix)
iters <- as.integer(iterations)
# Set up background transitions
if (!background_trans) {
if (background_value != 0) {
# Find the position of background_value in the matrix
row_idx <- which(as.integer(rownames(transition_matrix)) == background_value)
col_idx <- which(as.integer(colnames(transition_matrix)) == background_value)
if (length(row_idx) > 0 && length(col_idx) > 0) {
# Insert a row of 1 at the position of background_value
new_row <- rep(0, ncol(transition_matrix) + 1)
new_row[1] <- 1
transition_matrix <- rbind(transition_matrix[1:(row_idx - 1), ], new_row, transition_matrix[row_idx:nrow(transition_matrix), ])
# Insert a column of 0s at the position of background_value
new_col <- rep(0, nrow(transition_matrix))
transition_matrix <- cbind(transition_matrix[, 1:(col_idx - 1)], new_col, transition_matrix[, col_idx:ncol(transition_matrix)])
# Set the row and column names
rownames(transition_matrix) <- c(rownames(transition_matrix)[1:(row_idx - 1)], background_value, rownames(transition_matrix)[row_idx:(nrow(transition_matrix) - 1)])
colnames(transition_matrix) <- c(colnames(transition_matrix)[1:(col_idx - 1)], background_value, colnames(transition_matrix)[col_idx:(ncol(transition_matrix) - 1)])
}
} else {
# If background_value is 0, retain current behavior
transition_matrix <- rbind(0, transition_matrix)
transition_matrix <- cbind(0, transition_matrix)
rownames(transition_matrix) <- c(0, rownames(transition_matrix)[-1])
colnames(transition_matrix) <- c(0, colnames(transition_matrix)[-1])
}
}
# Find the patches in the og layer
patched_raster <- find_patches(original_raster)
# generate transition vectors
vecs <- generate_transition_vectors(patched_raster, confusion_matrix = conf_mat, iterations = iters)
# Collapse the patched raster and combined
tagged_raster <- collapse_and_combined(patched_raster, og_raster)
# Initialize the simulation with the original raster
current_raster <- original_raster
# create the new simulated raster
current_raster <- terra::app(tagged_raster, fun = transition_patches_random,
trans_vecs = vecs)
return(current_raster)
}
patch_sim <- simulate_raster_patch(original_raster = og_reclass,
transition_matrix = conf_mat,
iterations = 5)
Rcpp::sourceCpp("C:/Users/A02425259/Git/cdlsim/src/transition_function.cpp")
Rcpp::sourceCpp("C:/Users/A02425259/Git/cdlsim/src/transition_function.cpp")
#' Function to simulate tagged patch values in a single layer spatraster.
#'
#' @param original_raster The SpatRaster object representing the categorical data.
#' @param transition_matrix Transition matrix values that define transitions based on class values.
#' @param background_value The value that represents no data areas.
#' @param iterations The number of simulations to be performed.
#' @returns A SpatRaster where the negative value patches are set to transition.
#' @import landscapemetrics
#' @export
simulate_raster_patch <- function(original_raster, transition_matrix,
iterations = 10, background_value = 0,
background_trans = FALSE) {
# Ensure objects are the correct class
transition_matrix <- as.matrix(transition_matrix)
iters <- as.integer(iterations)
# Set up background transitions
if (!background_trans) {
if (background_value != 0) {
# Find the position of background_value in the matrix
row_idx <- which(as.integer(rownames(transition_matrix)) == background_value)
col_idx <- which(as.integer(colnames(transition_matrix)) == background_value)
if (length(row_idx) > 0 && length(col_idx) > 0) {
# Insert a row of 1 at the position of background_value
new_row <- rep(0, ncol(transition_matrix) + 1)
new_row[1] <- 1
transition_matrix <- rbind(transition_matrix[1:(row_idx - 1), ], new_row, transition_matrix[row_idx:nrow(transition_matrix), ])
# Insert a column of 0s at the position of background_value
new_col <- rep(0, nrow(transition_matrix))
transition_matrix <- cbind(transition_matrix[, 1:(col_idx - 1)], new_col, transition_matrix[, col_idx:ncol(transition_matrix)])
# Set the row and column names
rownames(transition_matrix) <- c(rownames(transition_matrix)[1:(row_idx - 1)], background_value, rownames(transition_matrix)[row_idx:(nrow(transition_matrix) - 1)])
colnames(transition_matrix) <- c(colnames(transition_matrix)[1:(col_idx - 1)], background_value, colnames(transition_matrix)[col_idx:(ncol(transition_matrix) - 1)])
}
} else {
# If background_value is 0, retain current behavior
transition_matrix <- rbind(0, transition_matrix)
transition_matrix <- cbind(0, transition_matrix)
rownames(transition_matrix) <- c(0, rownames(transition_matrix)[-1])
colnames(transition_matrix) <- c(0, colnames(transition_matrix)[-1])
}
}
# Find the patches in the og layer
patched_raster <- find_patches(original_raster)
# generate transition vectors
vecs <- generate_transition_vectors(patched_raster, confusion_matrix = conf_mat, iterations = iters)
# Collapse the patched raster and combined
tagged_raster <- collapse_and_combined(patched_raster, og_raster)
# Initialize the simulation with the original raster
current_raster <- original_raster
# create the new simulated raster
current_raster <- terra::app(tagged_raster, fun = transition_patches_random,
trans_vecs = vecs,
iterations = iters)
return(current_raster)
}
patch_sim <- simulate_raster_patch(original_raster = og_reclass,
transition_matrix = conf_mat,
iterations = 5)
patch_sim <- simulate_raster_patch(original_raster = og_reclass,
transition_matrix = conf_mat,
iterations = 2)
Rcpp::sourceCpp("C:/Users/A02425259/Git/cdlsim/src/transition_function.cpp")
Rcpp::sourceCpp("C:/Users/A02425259/Git/cdlsim/src/transition_function.cpp")
#' Function to simulate tagged patch values in a single layer spatraster.
#'
#' @param original_raster The SpatRaster object representing the categorical data.
#' @param transition_matrix Transition matrix values that define transitions based on class values.
#' @param background_value The value that represents no data areas.
#' @param iterations The number of simulations to be performed.
#' @returns A SpatRaster where the negative value patches are set to transition.
#' @import landscapemetrics
#' @export
simulate_raster_patch <- function(original_raster, transition_matrix,
iterations = 10, background_value = 0,
background_trans = FALSE) {
# Ensure objects are the correct class
transition_matrix <- as.matrix(transition_matrix)
iters <- as.integer(iterations)
# Set up background transitions
if (!background_trans) {
if (background_value != 0) {
# Find the position of background_value in the matrix
row_idx <- which(as.integer(rownames(transition_matrix)) == background_value)
col_idx <- which(as.integer(colnames(transition_matrix)) == background_value)
if (length(row_idx) > 0 && length(col_idx) > 0) {
# Insert a row of 1 at the position of background_value
new_row <- rep(0, ncol(transition_matrix) + 1)
new_row[1] <- 1
transition_matrix <- rbind(transition_matrix[1:(row_idx - 1), ], new_row, transition_matrix[row_idx:nrow(transition_matrix), ])
# Insert a column of 0s at the position of background_value
new_col <- rep(0, nrow(transition_matrix))
transition_matrix <- cbind(transition_matrix[, 1:(col_idx - 1)], new_col, transition_matrix[, col_idx:ncol(transition_matrix)])
# Set the row and column names
rownames(transition_matrix) <- c(rownames(transition_matrix)[1:(row_idx - 1)], background_value, rownames(transition_matrix)[row_idx:(nrow(transition_matrix) - 1)])
colnames(transition_matrix) <- c(colnames(transition_matrix)[1:(col_idx - 1)], background_value, colnames(transition_matrix)[col_idx:(ncol(transition_matrix) - 1)])
}
} else {
# If background_value is 0, retain current behavior
transition_matrix <- rbind(0, transition_matrix)
transition_matrix <- cbind(0, transition_matrix)
rownames(transition_matrix) <- c(0, rownames(transition_matrix)[-1])
colnames(transition_matrix) <- c(0, colnames(transition_matrix)[-1])
}
}
# Find the patches in the og layer
patched_raster <- find_patches(original_raster)
# generate transition vectors
vecs <- generate_transition_vectors(patched_raster, confusion_matrix = conf_mat, iterations = iters)
# Collapse the patched raster and combined
tagged_raster <- collapse_and_combined(patched_raster, og_raster)
# Initialize the simulation with the original raster
current_raster <- original_raster
# create the new simulated raster
current_raster <- terra::app(tagged_raster, fun = transition_patches_random,
trans_vecs = vecs,
iterations = iters)
return(current_raster)
}
patch_sim <- simulate_raster_patch(original_raster = og_reclass,
transition_matrix = conf_mat,
iterations = 5)
patch_sim
plot(patch_sim)
patch_sim <- simulate_raster_patch(original_raster = og_reclass,
transition_matrix = conf_mat,
iterations = 10)
plot(patch_sim)
plot(og_reclass)
plot(patch_sim[[1:4]])
knitr::opts_chunk$set(echo = TRUE)
# Uncomment the next line if you need to reinstall stat1080r, you may need to
# restart your Rstudio session to successfully complete this.
devtools::install_github("beanb2/stat1080r")
library(tidyverse)
library(stat1080r)
head(cereal)
knitr::opts_chunk$set(echo = TRUE)
sugar_mean_1 <- mean(cereal$Sugars, na.rm = TRUE)
all.equal(sugar_mean_1, hw1_sol$sugar_mean_1)
hw1_sol$sugar_mean_1
sugar_mean_1 <- cereal |>
mean(Sugars, na.rm = TRUE)
head(cereal)
sugar_mean_1 <- cereal |>
summarize(mean_sugar = mean(Sugars, na.rm = TRUE))
all.equal(sugar_mean_1, hw1_sol$sugar_mean_1)
sugar_mean_1 <- cereal |>
summarize(mean_sugar = mean(Sugars, na.rm = TRUE)) |>
pull(mean_sugar)
all.equal(sugar_mean_1, hw1_sol$sugar_mean_1)
hw1_sol
sugars_weight_mean <- (cereal$Sugars/cereal$Weight) %>%
mean(na.rm = TRUE)
# BE SURE TO UNCOMMENT THE FOLLOWING LINE BEFORE YOU SUBMIT
all.equal(sugars_weight_mean, hw1_sol$sugars_weight_mean)
sugars_weight_mean <- cereal |>
summarize(sugar_weight = Sugars/Weight) |>
summarize(mean_sugar_weight = mean(sugar_weight, na.rm = TRUE)) |>
pull(mean_sugar_weight)
# BE SURE TO UNCOMMENT THE FOLLOWING LINE BEFORE YOU SUBMIT
all.equal(sugars_weight_mean, hw1_sol$sugars_weight_mean)
sugars_weight_mean <- cereal |>
summarize(sugar_weight = Sugars/Weight,
mean_sugar_weight = mean(sugar_weight, na.rm = TRUE)) |>
pull(mean_sugar_weight)
sugars_weight_mean <-
cereal |>
mutate(sugar_weight = Sugars/Weight) |>
summarize(mean_sugar_weight = mean(sugar_weight, na.rm = TRUE)) |>
pull(mean_sugar_weight)
# BE SURE TO UNCOMMENT THE FOLLOWING LINE BEFORE YOU SUBMIT
all.equal(sugars_weight_mean, hw1_sol$sugars_weight_mean)
sugars_cup_mean <-
cereal |>
mutate(sugar_cup = Sugars/Cups) |>
summarize(mean_sugar_cup = mean(sugar_cup, na.rm = TRUE)) |>
pull(mean_sugar_cup)
# BE SURE TO UNCOMMENT THE FOLLOWING LINE BEFORE YOU SUBMIT
all.equal(sugars_cup_mean, hw1_sol$sugars_cup_mean)
cereals_man <- cereal %>%
group_by(Manufacturer) %>%
filter(!is.na(Sugars)) %>% # at least 5 non missing cereal types?
summarize(Sugars_mean = round(mean(Sugars), digits = 2),
Sugars_max = max(Sugars),
Sugars_min = min(Sugars),
Count = n()) %>%
filter(Count >= 5) %>%
arrange(desc(Sugars_mean))
# BE SURE TO UNCOMMENT THE FOLLOWING LINE BEFORE YOU SUBMIT
all.equal(cereals_man, hw1_sol[["cereals_man"]])
cereals_man <-
cereal |>
group_by(Manufacturer) |>
filter(!is.na(Sugars)) |>
summarize(Sugars_mean = round(mean(Sugars), digits = 2),
Sugars_max = max(Sugars),
Sugars_min = min(Sugars),
Count = n()) |>
filter(Count >= 5) |>
arrange(desc(Sugars_mean))
cereals_man
hw1_sol[["cereals_man"]]
cereals_man
hw1_sol[["cereals_man"]]
print(cereals_man)
print(cereals_man,  hw1_sol[["cereals_man"]])
print(cereals_man)
print(cereals_man)
print(hw1_sol[["cereals_man"]])
print(hw1_sol[["cereals_man"]])
# BE SURE TO UNCOMMENT THE FOLLOWING LINE BEFORE YOU SUBMIT
all.equal(cereals_man, hw1_sol[["cereals_man"]])
filter(Count >= 5) |>
arrange(desc(Sugars_mean))
cereals_man <-
cereal |>
group_by(Manufacturer) |>
filter(!is.na(Sugars)) |>
summarize(Sugars_mean = mean(Sugars),
Sugars_max = max(Sugars),
Sugars_min = min(Sugars),
Count = n()) |>
filter(Count >= 5) |>
arrange(desc(Sugars_mean))
# BE SURE TO UNCOMMENT THE FOLLOWING LINE BEFORE YOU SUBMIT
all.equal(cereals_man, hw1_sol[["cereals_man"]])
print(hw1_sol[["cereals_man"]])
print(cereals_man)
cereals_shelf <- cereal %>%
group_by(Shelf) %>%
filter(!is.na(Sugars)) %>% # at least 5 non missing cereal types?
summarize(Sugars_mean = round(mean(Sugars, na.rm = TRUE), digits = 2),
Sugars_max = max(Sugars, na.rm = TRUE),
Sugars_min = min(Sugars, na.rm = TRUE),
Count = n()) %>%
filter(Count >= 5) %>%
arrange(desc(Sugars_mean))
# BE SURE TO UNCOMMENT THE FOLLOWING LINE BEFORE YOU SUBMIT
all.equal(cereals_shelf, hw1_sol[["cereals_shelf"]])
cereals_shelf <- cereal %>%
group_by(Shelf) %>%
filter(!is.na(Sugars)) %>% # at least 5 non missing cereal types?
summarize(Sugars_mean = mean(Sugars, na.rm = TRUE),
Sugars_max = max(Sugars, na.rm = TRUE),
Sugars_min = min(Sugars, na.rm = TRUE),
Count = n()) %>%
filter(Count >= 5) %>%
arrange(desc(Sugars_mean))
# BE SURE TO UNCOMMENT THE FOLLOWING LINE BEFORE YOU SUBMIT
all.equal(cereals_shelf, hw1_sol[["cereals_shelf"]])
cereals_shelf <-
cereal |>
group_by(Shelf)|>
filter(!is.na(Sugars)) |>
summarize(Sugars_mean = mean(Sugars),
Sugars_max = max(Sugars),
Sugars_min = min(Sugars),
Count = n()) |>
filter(Count >= 5) |>
arrange(desc(Sugars_mean))
# BE SURE TO UNCOMMENT THE FOLLOWING LINE BEFORE YOU SUBMIT
all.equal(cereals_shelf, hw1_sol[["cereals_shelf"]])
load(data = cereal, package = "stat1080r")
load(cereal)
data(cereal)
hw1_sol[["cereals_shelf"]]
cereals_shelf
install.packages("lintr")
library(lintr)
library(styler)
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
cereal <- as.data.table(cereal)
head(cereal)
class(cereal)
